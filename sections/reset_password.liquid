{% comment %} on progress : Adi {% endcomment %}
{%- assign el_id = 'register-' | append: section.id -%}
{%- render 'section-padding', el_id: el_id, section: section -%}

<script>
  {% comment %} Check if has token {% endcomment %}
  const urlParams = new URLSearchParams(window.location.search);
  if(!urlParams.has("token")) {
    window.location = '/';
  }
</script>

<style>
  #{{el_id}} .account-menu {
    flex-direction: row;
  }
  #{{el_id}} .field-gender {
    flex-direction: column;
  }
  #{{el_id}} .register-row {
    margin-left: -7.5px;
    margin-right: -7.5px;
  }
  #{{el_id}} .register-row > div {
    padding-left: 7.5px;
    padding-right: 7.5px;
  }
  @media screen and (min-width: 1024px) {
    #{{el_id}} .account-menu {
      flex-direction: column;
    }
    #{{el_id}} .field-gender {
      flex-direction: row;
    }
  }
</style>

<div id="{{ el_id }}">
  <div class="container">
    <div class="row">
      <div class="col-d-3 col-12">
        <h1 class="h2 medium-500">{{ 'customer.reset_password.title' | t }}</h1>
      </div>
      <div class="col-d-3 col-12 mt-30 d-mt-0">
        <ul class="account-menu flex">
          <li class="mr-20 d-mr-0">
            <a href="{{ routes.account_login_url }}" class="hover-underline h4 uppercase">{{ 'customer.account.sign_in' | t }}</a>
          </li>
          <li class="d-mt-15">
            <a href="{{ routes.account_register_url }}" class="hover-underline h4 uppercase">
              {{- 'customer.account.register' | t -}}
            </a>
          </li>
        </ul>
      </div>
      <div class="col-d-5 col-12 col-hd-4 col-hhd-3 mt-30 d-mt-0">
        <form>
          <div class="register-row row ml-0 mr-0">
            <div class="col-d-12">
              <div class="relative overflow pb-1">
                <input
                  type="password"
                  name="customer[password]"
                  id="password"
                  class="global-input w-full bb-1 b-black p1 c-black pr-45"
                  placeholder="{{ 'customer.reset_password.password' | t }}"
                >
                <div class="global-placeholder absolute right-0 bottom-0 pb-8">{{ 'customer.reset_password.password' | t }}</div>
              </div>
              <div class="p2 mt-5 c-red hide-m error error-password"></div>
            </div>
            <div class="mt-20 col-d-12">
              <div class="relative overflow pb-1">
                <input
                  type="password"
                  name="customer[password_confirmation]"
                  id="password_confirmation"
                  class="global-input w-full bb-1 b-black p1 c-black pr-85"
                  placeholder="{{ 'customer.reset_password.password_confirm' | t }}"
                >
                <div class="global-placeholder absolute right-0 bottom-0 pb-8">{{ 'customer.reset_password.password_confirm' | t }}</div>
              </div>
              <div class="p2 mt-5 c-red hide-m error error-password-confirmation"></div>
            </div>
            <div class="col-d-12">
              <button type="button" class="btn1 w-full mt-25 d-mt-30 submit-btn" onclick="validate(event,true)">{{ 'customer.reset_password.submit' | t }}</button>
              <p class="p2 error-message c-red mt-10 hide-m"></p>
              <p class="p2 success-message mt-10 hide-m"></p>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

{{ 'jquery-ajax-module.js' | asset_url | script_tag }}
<script>
  function validatePasswordLength(password) {
    return password.length >= 6;
  }

  function getUrlParameter(parameterName) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(parameterName);
  } 

  function validate(e, submit = false) {
    e.preventDefault();
    let form = e.target.closest('form');
    let error_password = "{{ 'customer.register.required_field' | t }}";
    let password = form.querySelector('input[name="customer[password]"]');
    let elErrorpassword = form.querySelector('.error-password');
    let error_passwordConfirmation = "{{ 'customer.register.required_field' | t }}";
    let passwordConfirmation = form.querySelector('input[name="customer[password_confirmation]"]');
    let token = getUrlParameter('token');
    let elErrorpasswordConfirmation = form.querySelector('.error-password-confirmation');
    let submitBtn = form.querySelector('.submit-btn');
    let error_valid_char_password = "{{ 'customer.register.error_valid_char_password' | t }}";

    if (password.value && passwordConfirmation.value) {
      if (!validatePasswordLength(password.value)) {
        elErrorpassword.innerHTML = error_valid_char_password;
        elErrorpassword.classList.remove('hide-m');
        return;
      } else {
        elErrorpassword.classList.add('hide-m');
      }

      if (password.value == passwordConfirmation.value) {
        elErrorpasswordConfirmation.classList.add('hide-m');
        elErrorpassword.classList.add('hide-m');
        submitBtn.removeAttribute('disabled');
        if (submit) {
          let prevText = submitBtn.innerHTML;
          const btnLoading = '<span class="btn-loading"></span>';
          submitBtn.style.height = `${submitBtn.offsetHeight}px`;
          submitBtn.style.width = `${submitBtn.offsetWidth}px`;
          submitBtn.innerHTML = btnLoading;
          submitBtn.setAttribute('disabled', true);
          {% comment %} start BE integration {% endcomment %}
          $.ajax({
            type: "POST",
            url: "/apps/integration",
            data: `action=new-password-customer&customer[password]=${password.value}&customer[password_confirmation]=${passwordConfirmation.value}&customer[token]=${token}`,
            dataType: "json",
            success: function(data) {
              submitBtn.removeAttribute('disabled');
              submitBtn.innerHTML = prevText;
              const error_message_elem = document.querySelector('.error-message');
              const success_message_elem = document.querySelector('.success-message');
              if (error_message_elem != null) {
                if (!data.api) {
                  error_message_elem.classList.remove('hide-m');
                  error_message_elem.classList.add('c-red');
                  error_message_elem.innerHTML = data.msg;
                } else {
                  form.reset();
                  success_message_elem.innerHTML = data.msg;
                  success_message_elem.classList.add('c-green');
                  success_message_elem.classList.remove('hide-m');

                  const delay = setTimeout(() => {
                    window.location = '{{ routes.root_url }}account/login';

                    clearTimeout(delay);
                  }, 3000);
                }
              }
            },
            error: function(e) {
              submitBtn.removeAttribute('disabled');
              submitBtn.innerHTML = prevText;
              console.log(e);
            }
          });
          {% comment %} end BE integration {% endcomment %}
        }
      } else {
        error_passwordConfirmation = `{{ "customer.register.error_valid_password" | t }}`;
        elErrorpasswordConfirmation.innerHTML = error_passwordConfirmation;
        elErrorpasswordConfirmation.classList.remove('hide-m');
      }
    } else {
      if (!password.value) {
        elErrorpassword.innerHTML = error_password;
        elErrorpassword.classList.remove('hide-m');
      } else {
        elErrorpassword.classList.add('hide-m');
      }
      if (!passwordConfirmation.value) {
        elErrorpasswordConfirmation.innerHTML = error_passwordConfirmation;
        elErrorpasswordConfirmation.classList.remove('hide-m');
      } else {
        elErrorpasswordConfirmation.classList.add('hide-m');
      }
    }
  }
</script>

{% schema %}
{
  "name": "Reset Password",
  "settings": [
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "number",
      "id": "top_padding_m",
      "label": "Top padding (Mobile)"
    },
    {
      "type": "number",
      "id": "bottom_padding_m",
      "label": "Bottom padding (Mobile)"
    },
    {
      "type": "number",
      "id": "top_padding_t",
      "label": "Top padding (Tablet)"
    },
    {
      "type": "number",
      "id": "bottom_padding_t",
      "label": "Bottom padding (Tablet)"
    },
    {
      "type": "number",
      "id": "top_padding",
      "label": "Top padding (Desktop)"
    },
    {
      "type": "number",
      "id": "bottom_padding",
      "label": "Bottom padding (Desktop)"
    }
  ]
}
{% endschema %}
