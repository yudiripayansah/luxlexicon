{% comment %} JCO Theme - bismocii refinements progress {% endcomment %}
<style>
  .mobile-sidemenu {
    transition: top 0.3s ease;
  }
  .has-sticky-elem.zi-7.zi-2 {
    z-index: 99 !important;
  }
</style>
<div class="cf-sidebar relative top-0 left-0 w-full d-max-265 hhd-max-300 bottom-0 bg-lightpink show-d hide-m">
  <div class="container h-full">
    <ul class="cfs-menu sticky top-67 d-pt-80 d-pb-80 t-pt-60 t-pb-60 d-pt-70 d-pb-70 max-pt-80 hhd-pt-100 hhd-pb-100 w-full">
      {% for link in linklists[menu_list].links %}
        <li class="{% unless forloop.first == true %}d-mt-15{% endunless %}">
          <a href="{{link.url}}" class="p3 regular-400 {% unless request.path == link.url %}opacity-4{% endunless %}">
            {{- link.title -}}
          </a>
        </li>
      {% endfor %}
    </ul>
  </div>
</div>
<div class="hide-d mb-0 sticky zi-7 has-sticky-elem bg-white top-51 mobile-sidemenu" style="top:88px;">
  {% liquid
    assign active = blank
    assign select_id = 'sidemenu-contact-' | append: section.id
    assign values = empty
    assign option_values = empty
    for link in linklists[menu_list].links
      assign values = values | append: link.title | append: ','
      assign option_values = option_values | append: link.url | append: ','
      if request.path == link.url
        assign active = link.title
      endif
    endfor
    assign values = values | split: ','
    assign option_values = option_values | split: ','
    if active != blank
      assign default_text = active
    else
      assign default_text = ''
    endif
  %}
  {%- render 'global-select',
    default_value: default_value,
    default_text: default_text,
    values: values,
    option_values: option_values,
    id: select_id,
    selected_text_class: 'p1',
    onchange: 'window.location.href = this.value;',
    global_select_class: 'bb-1 b-border'
  -%}
</div>
<script>
  let prevScrollPos = 0;
  function isStickyAtBottom(element) {
    const bounding = element.getBoundingClientRect();
    const parentBounding = document.querySelector('.main-wrapper').getBoundingClientRect();
    const headerHeight = document.querySelector('.header-con-outer').offsetHeight;

    // Check if the element is at the bottom of its parent
    return bounding.bottom >= parentBounding.bottom - headerHeight;
  }

  function onscroll(e) {
    const doc = document.documentElement;
    const body = document.body;
    const scrollPos = Math.max(doc.scrollTop, body.scrollTop);
    const scrollDirection = scrollPos > prevScrollPos ? 'down' : 'up';
    const headerHeight = document.querySelector('.site-header').offsetHeight;
    let mobileSidebar = document.querySelector('.mobile-sidemenu');
    let announcementHieght = document.querySelector('#header-bar').offsetHeight;
    if (scrollDirection == 'down' && scrollPos > headerHeight) {
      mobileSidebar.style.top = '51.5px';
    } else if (scrollDirection == 'up') {
      if (scrollPos <= headerHeight) {
        mobileSidebar.style.top = headerHeight + 'px';
      }
    }
    prevScrollPos = scrollPos;

    const stickyElements = document.querySelector('.mobile-sidemenu');
    if (isStickyAtBottom(stickyElements)) {
      stickyElements.classList.remove('zi-7');
      stickyElements.classList.add('zi-2');
    } else {
      stickyElements.classList.remove('zi-2');
      stickyElements.classList.add('zi-7');
    }
  }
  window.addEventListener('scroll', onscroll);
  onscroll();
</script>
